package org.rogach.avalanche

import avalanche._
import scala.collection.mutable
import java.io.File

<#assign N = 22>
<#macro lc num><#if num gt 0><#list 1..num as h><#nested h><#if num != h>, </#if></#list></#if></#macro>

case class FunTaskDescr(
  inputs: List[File],
  outputs: List[File],
  dependencies: List[TaskDep],
  result: Any
)

object GlobalTasks {
  var suppressSideEffects: Boolean = false

  var inputFiles = new mutable.ListBuffer[File]()
  var outputFiles = new mutable.ListBuffer[File]()
  var dependencies = new mutable.ListBuffer[TaskDep]()

  var descrCache = new mutable.HashMap[(String, List[String]), FunTaskDescr]()
}

trait FunTasks {

  def build[A](fn: => A) {
    if (!GlobalTasks.suppressSideEffects) {
      fn
    }
  }

  def expect(fileName: String): String = {
    GlobalTasks.inputFiles += new File(fileName)
    fileName
  }

  def expect(file: File): File = {
    GlobalTasks.inputFiles += file
    file
  }

  def expect(files: List[File]): List[File] = {
    GlobalTasks.inputFiles ++= files
    files
  }

  def input(fileName: String) = expect(fileName)
  def input(file: File) = expect(file)
  def input(files: List[File]) = expect(files)

  def output(fileName: String): String = {
    GlobalTasks.outputFiles += new File(fileName)
    fileName
  }

  def output(file: File): File = {
    GlobalTasks.outputFiles += file
    file
  }

  def output(files: List[File]): List[File] = {
    GlobalTasks.outputFiles ++= files
    files
  }

  def depend(task: Task) {
    GlobalTasks.dependencies += task()
  }

  def depend(taskDep: TaskDep) {
    GlobalTasks.dependencies += taskDep
  }

  <#list 0..N as i>
  def funtask[R]
    (name: String, fn: (<@lc i; j>String</@lc>) => R)
    (implicit lc: ToFileListConverter[R])
    : FunTask${i}[R] = {
    val f = new FunTask${i}[R](name, fn)(lc)
    Avalanche.tasks += f.underlying
    f
  }

  </#list>
}

trait FunTask[R] {
  val name: String
  val lc: ToFileListConverter[R]

  def applyArguments(args: List[String]): R

  def safeApply(args: List[String]): R = {
    profile("FunTask/safeApply") {
      GlobalTasks.dependencies += underlying.apply(args:_*)
      val descr = getDescr(args)
      GlobalTasks.inputFiles ++= descr.outputs
      descr.result.asInstanceOf[R]
    }
  }

  def getDescr(args: List[String]): FunTaskDescr =
    GlobalTasks.descrCache.getOrElseUpdate((name, args), {
      val oldSuppress = GlobalTasks.suppressSideEffects
      val oldInputs = GlobalTasks.inputFiles
      val oldOutputs = GlobalTasks.outputFiles
      val oldDependencies = GlobalTasks.dependencies
      try {
        GlobalTasks.suppressSideEffects = true
        GlobalTasks.inputFiles = new mutable.ListBuffer()
        GlobalTasks.outputFiles = new mutable.ListBuffer()
        GlobalTasks.dependencies = new mutable.ListBuffer()

        val result = applyArguments(args)
        val resultFiles = lc.convertToFileList(result)
        FunTaskDescr(
          inputs = GlobalTasks.inputFiles.toList.distinct,
          outputs = (GlobalTasks.outputFiles.toList ++ resultFiles).distinct,
          dependencies = GlobalTasks.dependencies.toList,
          result = result
        )
      } finally {
        GlobalTasks.suppressSideEffects = oldSuppress
        GlobalTasks.inputFiles = oldInputs
        GlobalTasks.outputFiles = oldOutputs
        GlobalTasks.dependencies = oldDependencies
      }
    })
  def getInputFiles(args: List[String]): List[File] = getDescr(args).inputs
  def getOutputFiles(args: List[String]): List[File] = getDescr(args).outputs
  def getDependencies(args: List[String]): List[TaskDep] = getDescr(args).dependencies

  val underlying = new Task(
    name = name,
    rerun = args => {
      GlobalTasks.descrCache.remove((name, args))
      BuildImports.rerunOnModifiedFiles(
        name,
        getInputFiles,
        getOutputFiles
      )(args)
    },
    deps = getDependencies,
    body = applyArguments
  )

  def threads = underlying.threads
  def threads_=(t: Int) { underlying.threads = t }
}

<#list 0..N as i>
class FunTask${i}[R]
  (val name: String, fn: (<@lc i; j>String</@lc>) => R)
  (implicit val lc: ToFileListConverter[R])
extends Function${i}[<@lc i; j>String</@lc><#if i gt 0>,</#if>R]
with FunTask[R] {
  def apply(<@lc i; j>s${j}: String</@lc>): R = {
    safeApply(List(<@lc i; j>s${j}</@lc>))
  }
  def applyArguments(args: List[String]) = fn(<@lc i; j>args(${j}-1)</@lc>)
}

</#list>
